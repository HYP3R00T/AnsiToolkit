{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"AnsiToolkit <p>The <code>ansitoolkit</code> Python package was created to simplify working with ANSI escape codes, which are often essential for adding color, formatting, and cursor control in terminal applications. However, using ANSI codes directly can be cumbersome and error-prone, as they are not intuitive and can be difficult to remember or look up.</p> <p>To address this challenge, we designed <code>ansitoolkit</code> with a modular approach, organizing ANSI escape codes into dedicated classes. This structure allows users to access the codes in a more readable and manageable way, such as through methods and attributes like <code>CursorMovement.move_up()</code> or <code>Color.RED</code>. By encapsulating the complexity of ANSI codes within these classes, <code>ansitoolkit</code> makes it easier for developers to create terminal-based applications without needing to constantly reference ANSI code charts or worry about syntax errors.</p> <p>With <code>ansitoolkit</code>, our goal is to provide a developer-friendly interface that streamlines the use of ANSI codes, enabling more efficient and visually appealing terminal output.</p>"},{"location":"#installation","title":"Installation","text":"pip install ansitoolkit"},{"location":"#example","title":"Example","text":"<pre><code>from ansitoolkit import (\n    Ansi256Colors,\n    Colors,\n    Effects,\n    HexColors,\n    HSLColors,\n    RGBColors,\n)\n\n\ndef main():\n    # Basic Colors\n    print(f\"{Colors.FG_RED}{Colors.BG_BLACK}Red Text on Black Background{Effects.RESET}\")\n    print(f\"{Colors.FG_GREEN}{Colors.BG_WHITE}Green Text on White Background{Effects.RESET}\")\n    print(f\"{Colors.FG_YELLOW}{Colors.BG_BLUE}Yellow Text on Blue Background{Effects.RESET}\")\n\n    # Bright Colors\n    print(f\"{Colors.FG_BRIGHT_MAGENTA}{Colors.BG_CYAN}Bright Magenta on Cyan Background{Effects.RESET}\")\n\n    # RGB Colors\n    print(f\"{RGBColors.rgb_foreground(255, 100, 50)}RGB Text (255, 100, 50){Effects.RESET}\")\n    print(f\"{RGBColors.rgb_background(50, 100, 200)}RGB Background (50, 100, 200){Effects.RESET}\")\n\n    # 256-Color\n    print(f\"{Ansi256Colors.color_foreground(123)}256-Color Foreground (Index 123){Effects.RESET}\")\n    print(f\"{Ansi256Colors.color_background(45)}256-Color Background (Index 45){Effects.RESET}\")\n\n    # HSL Colors\n    print(f\"{HSLColors.hsl_foreground(200, 0.5, 0.5)}HSL Foreground (Hue 200, Saturation 0.5, Lightness 0.5){Effects.RESET}\")\n    print(f\"{HSLColors.hsl_background(100, 0.7, 0.4)}HSL Background (Hue 100, Saturation 0.7, Lightness 0.4){Effects.RESET}\")\n\n    # Hex Colors\n    print(f\"{HexColors.hex_foreground('#ff5733')}Hex Foreground (#ff5733){Effects.RESET}\")\n    print(f\"{HexColors.hex_background('#33ff57')}Hex Background (#33ff57){Effects.RESET}\")\n\n    # Effects and Device Status\n    print(f\"{Effects.BOLD}Bold Text{Effects.RESET}\")\n    print(f\"{Effects.UNDERLINE}Underlined Text{Effects.RESET}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Output </p>"},{"location":"references/Colors/","title":"Color","text":""},{"location":"references/Colors/#colors-class","title":"Colors Class","text":"<p>The <code>Colors</code> class provides ANSI escape sequences for standard 8-bit colors, both for foreground and background purposes. These are predefined colors commonly used in terminals.</p>"},{"location":"references/Colors/#foreground-colors","title":"Foreground Colors","text":"<p>Available colors: - Black [<code>FG_BLACK</code>, <code>FG_BRIGHT_BLACK</code>] - Red [<code>FG_RED</code>, <code>FG_BRIGHT_RED</code>] - Green [<code>FG_GREEN</code>, <code>FG_BRIGHT_GREEN</code>] - Yellow [<code>FG_YELLOW</code>, <code>FG_BRIGHT_YELLOW</code>] - Blue [<code>FG_BLUE</code>, <code>FG_BRIGHT_BLUE</code>] - Magenta [<code>FG_MAGENTA</code>, <code>FG_BRIGHT_MAGENTA</code>] - Cyan [<code>FG_CYAN</code>, <code>FG_BRIGHT_CYAN</code>] - White [<code>FG_WHITE</code>, <code>FG_BRIGHT_WHITE</code>]</p> <pre><code>from ansitoolkit import Colors\n\n# Set foreground color to red\nprint(Colors.FG_RED)\n</code></pre>"},{"location":"references/Colors/#background-colors","title":"Background Colors","text":"<p>Available colors: - Black [<code>BG_BLACK</code>, <code>BG_BRIGHT_BLACK</code>] - Red [<code>BG_RED</code>, <code>BG_BRIGHT_RED</code>] - Green [<code>BG_GREEN</code>, <code>BG_BRIGHT_GREEN</code>] - Yellow [<code>BG_YELLOW</code>, <code>BG_BRIGHT_YELLOW</code>] - Blue [<code>BG_BLUE</code>, <code>BG_BRIGHT_BLUE</code>] - Magenta [<code>BG_MAGENTA</code>, <code>BG_BRIGHT_MAGENTA</code>] - Cyan [<code>BG_CYAN</code>, <code>BG_BRIGHT_CYAN</code>] - White [<code>BG_WHITE</code>, <code>BG_BRIGHT_WHITE</code>]</p> <pre><code>from ansitoolkit import Colors\n\n# Set background color to blue\nprint(Colors.BG_BLUE)\n</code></pre>"},{"location":"references/Colors/#rgbcolors-class","title":"RGBColors Class","text":"<p>The <code>RGBColors</code> class allows for the use of true RGB colors in your terminal. You can specify any RGB values within the range of 0 to 255 for red, green, and blue.</p>"},{"location":"references/Colors/#rgb-foreground","title":"RGB Foreground","text":"<pre><code>from ansitoolkit import RGBColors\n\n# Generate RGB foreground color sequence for color (255, 100, 50)\nprint(RGBColors.rgb_foreground(255, 100, 50))\n</code></pre>"},{"location":"references/Colors/#rgb-background","title":"RGB Background","text":"<pre><code>from ansitoolkit import RGBColors\n\n# Generate RGB background color sequence for color (50, 100, 200)\nprint(RGBColors.rgb_background(50, 100, 200))\n</code></pre> <p>Range: RGB values can be set between 0 and 255 for each color channel.</p>"},{"location":"references/Colors/#ansi256colors-class","title":"Ansi256Colors Class","text":"<p>The <code>Ansi256Colors</code> class supports 256-color sequences, allowing for a broader range of colors compared to the basic 8-bit colors. You can specify a color index between 0 and 255.</p>"},{"location":"references/Colors/#256-color-foreground","title":"256-Color Foreground","text":"<pre><code>from ansitoolkit import Ansi256Colors\n\n# Set 256-color foreground color using index 123\nprint(Ansi256Colors.color_foreground(123))\n</code></pre>"},{"location":"references/Colors/#256-color-background","title":"256-Color Background","text":"<pre><code>from ansitoolkit import Ansi256Colors\n\n# Set 256-color background color using index 45\nprint(Ansi256Colors.color_background(45))\n</code></pre> <p>Range: Color index values range from 0 to 255.</p>"},{"location":"references/Colors/#hslcolors-class","title":"HSLColors Class","text":"<p>The <code>HSLColors</code> class converts HSL (Hue, Saturation, Lightness) values into RGB and generates corresponding color sequences. This allows for colors based on the HSL color model.</p>"},{"location":"references/Colors/#hsl-foreground","title":"HSL Foreground","text":"<pre><code>from ansitoolkit import HSLColors\n\n# Generate HSL foreground color sequence with hue=200, saturation=0.5, lightness=0.5\nprint(HSLColors.hsl_foreground(200, 0.5, 0.5))\n</code></pre>"},{"location":"references/Colors/#hsl-background","title":"HSL Background","text":"<pre><code>from ansitoolkit import HSLColors\n\n# Generate HSL background color sequence with hue=100, saturation=0.7, lightness=0.4\nprint(HSLColors.hsl_background(100, 0.7, 0.4))\n</code></pre> <p>Range: - Hue: 0 to 360 degrees - Saturation: 0 to 1 - Lightness: 0 to 1</p>"},{"location":"references/Colors/#hexcolors-class","title":"HexColors Class","text":"<p>The <code>HexColors</code> class enables the conversion of hex color codes to RGB and generating ANSI color sequences. This is useful for utilizing web color codes in terminal applications.</p>"},{"location":"references/Colors/#hex-foreground","title":"Hex Foreground","text":"<pre><code>from ansitoolkit import HexColors\n\n# Generate hex foreground color sequence for hex code \"#ff5733\"\nprint(HexColors.hex_foreground(\"#ff5733\"))\n</code></pre>"},{"location":"references/Colors/#hex-background","title":"Hex Background","text":"<pre><code>from ansitoolkit import HexColors\n\n# Generate hex background color sequence for hex code \"#33ff57\"\nprint(HexColors.hex_background(\"#33ff57\"))\n</code></pre> <p>Range: Hex color codes must be 6 characters long, representing RGB values as hex digits.</p>"},{"location":"references/Cursor%20Movement/","title":"CursorMovement","text":"<p>The <code>CursorMovement</code> class provides a set of static methods to control cursor movement in the terminal using ANSI escape codes. These methods allow you to move the cursor up, down, forward, backward, and to specific positions, making it easier to format terminal output dynamically.</p>"},{"location":"references/Cursor%20Movement/#usage","title":"Usage","text":""},{"location":"references/Cursor%20Movement/#moving-the-cursor-up","title":"Moving the Cursor Up","text":"<p>To move the cursor up by a specific number of lines:</p> <pre><code>from ansitoolkit import CursorMovement\n\n# Move cursor up by 5 lines\nprint(CursorMovement.move_up(5))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-the-cursor-down","title":"Moving the Cursor Down","text":"<p>To move the cursor down by a specific number of lines:</p> <pre><code># Move cursor down by 3 lines\nprint(CursorMovement.move_down(3))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-the-cursor-forward","title":"Moving the Cursor Forward","text":"<p>To move the cursor forward by a specific number of columns:</p> <pre><code># Move cursor forward by 10 columns\nprint(CursorMovement.move_forward(10))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-the-cursor-backward","title":"Moving the Cursor Backward","text":"<p>To move the cursor backward by a specific number of columns:</p> <pre><code># Move cursor back by 7 columns\nprint(CursorMovement.move_back(7))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-to-the-next-line","title":"Moving to the Next Line","text":"<p>To move the cursor to the beginning of the next line:</p> <pre><code># Move to the next line 2 times\nprint(CursorMovement.move_next_line(2))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-to-the-previous-line","title":"Moving to the Previous Line","text":"<p>To move the cursor to the beginning of the previous line:</p> <pre><code># Move to the previous line 4 times\nprint(CursorMovement.move_prev_line(4))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-to-a-specific-column","title":"Moving to a Specific Column","text":"<p>To move the cursor to a specific column in the current line:</p> <pre><code># Move to column 15\nprint(CursorMovement.move_column(15))\n</code></pre>"},{"location":"references/Cursor%20Movement/#moving-to-a-specific-position","title":"Moving to a Specific Position","text":"<p>To move the cursor to a specific row and column:</p> <pre><code># Move to row 10, column 20\nprint(CursorMovement.move_position(10, 20))\n</code></pre>"},{"location":"references/Cursor%20Movement/#special-cursor-operations","title":"Special Cursor Operations","text":""},{"location":"references/Cursor%20Movement/#resetting-the-cursor-position","title":"Resetting the Cursor Position","text":"<p>To reset the cursor to the home position (0,0):</p> <pre><code># Reset cursor to the top-left corner (home position)\nprint(CursorMovement.RESET_POSITION)\n</code></pre>"},{"location":"references/Cursor%20Movement/#saving-the-cursor-position","title":"Saving the Cursor Position","text":"<p>To save the current cursor position:</p> <pre><code># Save the current cursor position\nprint(CursorMovement.SAVE_POSITION)\n</code></pre>"},{"location":"references/Cursor%20Movement/#restoring-the-cursor-position","title":"Restoring the Cursor Position","text":"<p>To restore the cursor to the previously saved position:</p> <pre><code># Restore the cursor to the saved position\nprint(CursorMovement.RESTORE_POSITION)\n</code></pre>"},{"location":"references/Device%20Status/","title":"DeviceStatus","text":"<p>The <code>DeviceStatus</code> class provides pre-defined ANSI escape sequences that allow you to query the status of the terminal, including device status, cursor position, and more. These sequences are useful when you need to interact with the terminal at a lower level, for tasks like checking the terminal's status or reporting its position.</p>"},{"location":"references/Device%20Status/#usage","title":"Usage","text":""},{"location":"references/Device%20Status/#device-status-report","title":"Device Status Report","text":"<p>To send a device status report request to the terminal:</p> <pre><code>from ansitoolkit import DeviceStatus\n\n# Request a device status report\nprint(DeviceStatus.DEVICE_STATUS_REPORT)\n</code></pre>"},{"location":"references/Device%20Status/#terminal-ok","title":"Terminal OK","text":"<p>To check if the terminal is functioning correctly:</p> <pre><code># Query if the terminal is OK\nprint(DeviceStatus.TERMINAL_OK)\n</code></pre>"},{"location":"references/Device%20Status/#terminal-malfunction","title":"Terminal Malfunction","text":"<p>To check if the terminal is malfunctioning:</p> <pre><code># Query if the terminal is malfunctioning\nprint(DeviceStatus.TERMINAL_MALFUNCTION)\n</code></pre>"},{"location":"references/Device%20Status/#cursor-position-report","title":"Cursor Position Report","text":"<p>To request the current cursor position from the terminal:</p> <pre><code># Request the current cursor position\nprint(DeviceStatus.CURSOR_POSITION_REPORT)\n</code></pre>"},{"location":"references/Device%20Status/#query-device-attributes","title":"Query Device Attributes","text":"<p>To query the terminal for its attributes:</p> <pre><code># Query device attributes (e.g., terminal type)\nprint(DeviceStatus.QUERY_DEVICE_ATTRIBUTES)\n</code></pre>"},{"location":"references/Effects/","title":"Effects","text":"<p>The <code>Effects</code> class provides a collection of ANSI escape sequences to apply various text effects in the terminal, such as bold, italic, underline, and more. These effects are useful for enhancing the visual appearance of terminal output, allowing for better readability and emphasis in text-based applications.</p>"},{"location":"references/Effects/#usage","title":"Usage","text":""},{"location":"references/Effects/#reset-effects","title":"Reset Effects","text":"<p>To reset all text formatting and effects to default:</p> <pre><code>from ansitoolkit import Effects\n\n# Reset all text effects\nprint(Effects.RESET)\n</code></pre>"},{"location":"references/Effects/#apply-bold-effect","title":"Apply Bold Effect","text":"<p>To make the text bold:</p> <pre><code># Apply bold effect to text\nprint(Effects.BOLD)\n</code></pre>"},{"location":"references/Effects/#apply-dim-effect","title":"Apply Dim Effect","text":"<p>To apply dim (faint) text effect:</p> <pre><code># Apply dim effect to text\nprint(Effects.DIM)\n</code></pre>"},{"location":"references/Effects/#apply-italic-effect","title":"Apply Italic Effect","text":"<p>To italicize the text:</p> <pre><code># Apply italic effect to text\nprint(Effects.ITALIC)\n</code></pre>"},{"location":"references/Effects/#apply-underline-effect","title":"Apply Underline Effect","text":"<p>To underline the text:</p> <pre><code># Apply underline effect to text\nprint(Effects.UNDERLINE)\n</code></pre>"},{"location":"references/Effects/#apply-slow-blink-effect","title":"Apply Slow Blink Effect","text":"<p>To make the text blink slowly:</p> <pre><code># Apply slow blink effect to text\nprint(Effects.SLOW_BLINK)\n</code></pre>"},{"location":"references/Effects/#apply-rapid-blink-effect","title":"Apply Rapid Blink Effect","text":"<p>To make the text blink rapidly:</p> <pre><code># Apply rapid blink effect to text\nprint(Effects.RAPID_BLINK)\n</code></pre>"},{"location":"references/Effects/#apply-reverse-video-effect","title":"Apply Reverse Video Effect","text":"<p>To reverse the text and background colors:</p> <pre><code># Apply reverse effect to text\nprint(Effects.REVERSE)\n</code></pre>"},{"location":"references/Effects/#hide-text","title":"Hide Text","text":"<p>To hide the text (make it invisible):</p> <pre><code># Hide the text\nprint(Effects.HIDE)\n</code></pre>"},{"location":"references/Effects/#apply-strikethrough-effect","title":"Apply Strikethrough Effect","text":"<p>To strike through the text:</p> <pre><code># Apply strikethrough effect to text\nprint(Effects.STRIKETHROUGH)\n</code></pre>"},{"location":"references/Effects/#apply-double-underline-effect","title":"Apply Double Underline Effect","text":"<p>To apply a double underline to the text:</p> <pre><code># Apply double underline effect to text\nprint(Effects.DOUBLE_UNDERLINE)\n</code></pre>"},{"location":"references/Effects/#reverting-effects","title":"Reverting Effects","text":""},{"location":"references/Effects/#normal-intensity","title":"Normal Intensity","text":"<p>To revert text to normal intensity (i.e., remove bold or dim effects):</p> <pre><code># Revert text to normal intensity\nprint(Effects.NORMAL_INTENSITY)\n</code></pre>"},{"location":"references/Effects/#remove-italic-effect","title":"Remove Italic Effect","text":"<p>To remove the italic effect from the text:</p> <pre><code># Remove italic effect from text\nprint(Effects.NOT_ITALIC)\n</code></pre>"},{"location":"references/Effects/#remove-underline-effect","title":"Remove Underline Effect","text":"<p>To remove the underline from the text:</p> <pre><code># Remove underline effect from text\nprint(Effects.NOT_UNDERLINED)\n</code></pre>"},{"location":"references/Effects/#turn-off-blinking","title":"Turn Off Blinking","text":"<p>To stop text from blinking:</p> <pre><code># Turn off blinking effect\nprint(Effects.BLINK_OFF)\n</code></pre>"},{"location":"references/Effects/#turn-off-reverse-effect","title":"Turn Off Reverse Effect","text":"<p>To disable the reverse video effect:</p> <pre><code># Turn off reverse effect\nprint(Effects.REVERSE_OFF)\n</code></pre>"},{"location":"references/Effects/#reveal-hidden-text","title":"Reveal Hidden Text","text":"<p>To reveal text that was previously hidden:</p> <pre><code># Reveal hidden text\nprint(Effects.REVEAL)\n</code></pre>"},{"location":"references/Effects/#remove-strikethrough-effect","title":"Remove Strikethrough Effect","text":"<p>To remove the strikethrough effect from the text:</p> <pre><code># Remove strikethrough effect from text\nprint(Effects.NOT_STRIKETHROUGH)\n</code></pre>"},{"location":"references/Graphics%20and%20Character%20Sets/","title":"GraphicsAndCharacterSets","text":"<p>The <code>GraphicsAndCharacterSets</code> class provides ANSI escape sequences for controlling various graphics and character set modes in the terminal. These sequences allow you to manage text wrapping, set character sets, and switch between different display modes.</p>"},{"location":"references/Graphics%20and%20Character%20Sets/#usage","title":"Usage","text":""},{"location":"references/Graphics%20and%20Character%20Sets/#standard-mode","title":"Standard Mode","text":"<p>To switch to the standard graphics mode, which is typically the default mode:</p> <pre><code>from ansitoolkit import GraphicsAndCharacterSets\n\n# Switch to standard graphics mode\nprint(GraphicsAndCharacterSets.STANDARD_MODE)\n</code></pre>"},{"location":"references/Graphics%20and%20Character%20Sets/#enable-line-wrapping","title":"Enable Line Wrapping","text":"<p>To enable line wrapping, allowing text to wrap automatically at the end of a line:</p> <pre><code># Enable line wrapping\nprint(GraphicsAndCharacterSets.ENABLE_LINE_WRAPPING)\n</code></pre>"},{"location":"references/Graphics%20and%20Character%20Sets/#disable-line-wrapping","title":"Disable Line Wrapping","text":"<p>To disable line wrapping, so text does not automatically wrap and continues on a single line:</p> <pre><code># Disable line wrapping\nprint(GraphicsAndCharacterSets.DISABLE_LINE_WRAPPING)\n</code></pre>"},{"location":"references/Graphics%20and%20Character%20Sets/#set-character-set-g0","title":"Set Character Set G0","text":"<p>To select the G0 character set, which is used for various standard text symbols and characters:</p> <pre><code># Set character set to G0\nprint(GraphicsAndCharacterSets.SET_CHARACTER_SET_G0)\n</code></pre>"},{"location":"references/Graphics%20and%20Character%20Sets/#set-character-set-g1","title":"Set Character Set G1","text":"<p>To select the G1 character set, which is used for alternative symbols and characters:</p> <pre><code># Set character set to G1\nprint(GraphicsAndCharacterSets.SET_CHARACTER_SET_G1)\n</code></pre>"},{"location":"references/Keyboard%20and%20Input%20Modes/","title":"KeyboardAndInputModes","text":"<p>The <code>KeyboardAndInputModes</code> class provides ANSI escape sequences to manage keyboard and input modes in the terminal. These sequences control how the keypad operates and the visibility of the cursor, allowing for a more customized terminal interaction.</p>"},{"location":"references/Keyboard%20and%20Input%20Modes/#usage","title":"Usage","text":""},{"location":"references/Keyboard%20and%20Input%20Modes/#application-keypad-mode","title":"Application Keypad Mode","text":"<p>To switch the keypad to application mode, which is used by certain applications to interpret keypad inputs differently:</p> <pre><code>from ansitoolkit import KeyboardAndInputModes\n\n# Set keypad to application mode\nprint(KeyboardAndInputModes.APPLICATION_KEYPAD_MODE)\n</code></pre>"},{"location":"references/Keyboard%20and%20Input%20Modes/#normal-keypad-mode","title":"Normal Keypad Mode","text":"<p>To switch the keypad back to normal mode, which is the default behavior for keypad inputs:</p> <pre><code># Set keypad to normal mode\nprint(KeyboardAndInputModes.NORMAL_KEYPAD_MODE)\n</code></pre>"},{"location":"references/Keyboard%20and%20Input%20Modes/#enable-cursor-visibility","title":"Enable Cursor Visibility","text":"<p>To make the cursor visible in the terminal:</p> <pre><code># Enable cursor visibility\nprint(KeyboardAndInputModes.ENABLE_CURSOR_VISIBILITY)\n</code></pre>"},{"location":"references/Keyboard%20and%20Input%20Modes/#disable-cursor-visibility","title":"Disable Cursor Visibility","text":"<p>To hide the cursor in the terminal:</p> <pre><code># Disable cursor visibility\nprint(KeyboardAndInputModes.DISABLE_CURSOR_VISIBILITY)\n</code></pre>"},{"location":"references/Screen%20Control/","title":"ScreenControl","text":"<p>The <code>ScreenControl</code> class provides ANSI escape sequences for managing screen and cursor visibility in the terminal. These sequences allow you to clear parts of the screen, manage cursor visibility, and switch between different screen modes.</p>"},{"location":"references/Screen%20Control/#usage","title":"Usage","text":""},{"location":"references/Screen%20Control/#clear-to-end-of-screen","title":"Clear to End of Screen","text":"<p>To clear the terminal screen from the current cursor position to the end of the screen:</p> <pre><code>from ansitoolkit import ScreenControl\n\n# Clear the screen from the cursor to the end\nprint(ScreenControl.CLEAR_TO_END_OF_SCREEN)\n</code></pre>"},{"location":"references/Screen%20Control/#clear-to-start-of-screen","title":"Clear to Start of Screen","text":"<p>To clear the terminal screen from the current cursor position to the start of the screen:</p> <pre><code># Clear the screen from the cursor to the start\nprint(ScreenControl.CLEAR_TO_START_OF_SCREEN)\n</code></pre>"},{"location":"references/Screen%20Control/#clear-entire-screen","title":"Clear Entire Screen","text":"<p>To clear the entire terminal screen:</p> <pre><code># Clear the entire screen\nprint(ScreenControl.CLEAR_ENTIRE_SCREEN)\n</code></pre>"},{"location":"references/Screen%20Control/#clear-to-end-of-line","title":"Clear to End of Line","text":"<p>To clear the line from the current cursor position to the end of the line:</p> <pre><code># Clear from the cursor to the end of the line\nprint(ScreenControl.CLEAR_TO_END_OF_LINE)\n</code></pre>"},{"location":"references/Screen%20Control/#clear-to-start-of-line","title":"Clear to Start of Line","text":"<p>To clear the line from the current cursor position to the start of the line:</p> <pre><code># Clear from the cursor to the start of the line\nprint(ScreenControl.CLEAR_TO_START_OF_LINE)\n</code></pre>"},{"location":"references/Screen%20Control/#clear-entire-line","title":"Clear Entire Line","text":"<p>To clear the entire line where the cursor is currently positioned:</p> <pre><code># Clear the entire line\nprint(ScreenControl.CLEAR_ENTIRE_LINE)\n</code></pre>"},{"location":"references/Screen%20Control/#show-cursor","title":"Show Cursor","text":"<p>To make the cursor visible in the terminal:</p> <pre><code># Show the cursor\nprint(ScreenControl.SHOW_CURSOR)\n</code></pre>"},{"location":"references/Screen%20Control/#hide-cursor","title":"Hide Cursor","text":"<p>To hide the cursor in the terminal:</p> <pre><code># Hide the cursor\nprint(ScreenControl.HIDE_CURSOR)\n</code></pre>"},{"location":"references/Screen%20Control/#switch-to-alternate-screen","title":"Switch to Alternate Screen","text":"<p>To switch to the alternate screen buffer, commonly used by text editors and other applications:</p> <pre><code># Switch to the alternate screen buffer\nprint(ScreenControl.SWITCH_ALTERNATE_SCREEN)\n</code></pre>"},{"location":"references/Screen%20Control/#switch-to-normal-screen","title":"Switch to Normal Screen","text":"<p>To switch back to the normal screen buffer:</p> <pre><code># Switch to the normal screen buffer\nprint(ScreenControl.SWITCH_NORMAL_SCREEN)\n</code></pre>"},{"location":"references/Scrolling%20Region/","title":"ScrollingRegion","text":"<p>The <code>ScrollingRegion</code> class provides ANSI escape sequences for managing scrolling regions within the terminal. Scrolling regions allow you to define a specific area of the terminal that can scroll independently from the rest of the screen, which is useful for creating dynamic text displays or managing output in specific sections of the terminal.</p>"},{"location":"references/Scrolling%20Region/#usage-examples","title":"Usage Examples","text":""},{"location":"references/Scrolling%20Region/#set-scrolling-region","title":"Set Scrolling Region","text":"<p>To define a scrolling region within the terminal from a specific top row to a bottom row. This allows you to create a windowed area where text can scroll while the rest of the terminal content remains static.</p> <pre><code>from ansitoolkit import ScrollingRegion\n\n# Define a scrolling region from row 5 to row 20\nprint(ScrollingRegion.set_scrolling_region(5, 20))\n</code></pre>"},{"location":"references/Scrolling%20Region/#reset-scrolling-region","title":"Reset Scrolling Region","text":"<p>To reset the scrolling region to the default state, effectively disabling any previously set scrolling region:</p> <pre><code># Reset the scrolling region to default\nprint(ScrollingRegion.RESET_SCROLLING_REGION)\n</code></pre>"}]}